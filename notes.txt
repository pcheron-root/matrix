
----------------------------------------------------------------------
Les traits
----------------------------------------------------------------------

En rust, un trait est un mécanisme de polymorphisme qui permet de définir des comportements communs
entre différents types. 
Un trait spécifie un ensemble de méthodes qu'un type peut implémenter.

Le trait en rust a le meme objectif que les interfaces en Java ou des templates en C++

ex :
Je veux que ma structure aie une fonction qui utilise println!("{:?}", ) avec en argument un variable
qui peut avoir plusieurs type. pour pouvoir utiliser {:?}, ma variable doit avoir le trait Debug
alors en amont, quand je declare ma fonction je dois presiser que le type de la variable que
je vais utiliser, a bien le trait Debug.

impl<K, const M: usize, const N: usize> Matrix<K, M, N>
where
    K: Debug,	// le type K doit implementer le trait Debug,
				// ce qui lui permet d'utiliser "{:?}" dans le code
				// du coup on accepte pas les types K qui n'implementent pas Debug
				// dans les fonctions qui suivent cette implementation


